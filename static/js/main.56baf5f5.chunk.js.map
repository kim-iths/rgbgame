{"version":3,"sources":["js/generators.js","js/options.js","js/colorCalc.jsx","components/Generator.jsx","js/upgrades.js","components/Upgrade.jsx","js/interval.jsx","js/generatorUpgrades.js","js/values.js","js/upgradeHandler.jsx","components/Notification.jsx","components/Game.jsx","js/click.js","components/Tooltip.jsx","components/Option.jsx","components/Options.jsx","App.js","reportWebVitals.js","index.js"],"names":["generators","name","baseRps","basePrice","price","count","vertices","image","imageAnim","levelThresholds","threshold","bonus","options","title","tooltip","type","value","typeValues","redToRgb","red","rgb","parseFloat","toFixed","i","next","Math","floor","rgbToRed","buy","currentRgb","priceRgb","priceRed","currentRed","console","log","suffixes","handleBigNumber","number","log10","suffix","text","pow","Generator","onClick","genId","useState","gen","width","setWidth","level","setLevel","setImage","onBuy","t","prevT","widthPercent","useEffect","id","className","onMouseEnter","document","querySelector","classList","contains","onMouseLeave","rps","style","src","process","alt","upgrades","description","maxRanks","effect","effectModifier","Upgrade","upgradeId","upgrade","useInterval","callback","delay","savedCallback","useRef","current","setInterval","clearInterval","generatorUpgrades","MaxRanks","values","color","rpsMultiplier","clickValue","clickMultiplier","vertexRpsMultiplier","vertexClickMultiplier","clickValuePerVertex","handleUpgrade","modifier","typeArray","split","upgradeType","multiplier","multiplyValue","addAmount","addValue","time","forEach","c","addColor","vertexUpgrade","Notification","important","Game","useCookies","cookies","setCookie","left","right","isMenuOpen","setIsMenuOpen","framerate","setFramerate","isActive","setIsActive","generatorElements","setGeneratorElements","upgradeElements","setUpgradeElements","main","header","elements","setElements","r","g","b","p","setColor","clickValueRed","setClickValueRed","clickValueRgb","setClickValueRgb","setRps","rpt","setRpt","rgbps","setRgbps","rgbpt","setRgbpt","generatorCount","upgradeCount","totalMultiplier","stats","setStats","notifs","setNotifs","checkCanAfford","Object","assign","add","remove","bought","upgradeElement","incrementRgb","checkRgb","calculateStats","genCount","genRps","mult","clickMult","totalClickValue","totalRps","checkMultiplier","map","remainder","priceIncreasePercentage","tryBuy","onUpgrade","sort","a","tryBuyUpgrade","openMenu","dir","menu","button","toggle","firstChild","innerText","length","property","opt","addEventListener","hidden","generatorData","push","upgradeData","optionsData","setTimeout","addNotification","bg","backgroundColor","leftMenu","rightMenu","leftStats","rightStats","e","headerHeight","x","y","randomWidthOffset","randomHeightOffset","offsetHeight","clientX","clientY","random","createElement","appendChild","textX","offsetWidth","textY","top","clickEffect","position","fx","deg","transform","click","Tooltip","Option","optionId","action","setAction","isEnabled","setIsEnabled","dropdownValue","setDropdownValue","setTooltip","el","v","onChange","target","Options","dismiss","removeCookie","optionsElements","setOptionsElements","optionCallback","o","reset","toString","window","location","reload","currentTarget","App","isOptionsOpen","setIsOptionsOpen","toggleOptions","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","CookiesProvider","getElementById"],"mappings":"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","file":"static/js/main.56baf5f5.chunk.js","sourcesContent":["export const generators = [\n    //tier 1\n    {\n        name: \"Triangle\",\n        baseRps: 0.2, //150s\n        basePrice: [30,0,0],\n        price: [30,0,0],\n        count: 0,\n        vertices: 3,\n        image: \"/assets/generators/triangle.png\",\n        imageAnim: \"/assets/generators/triangle-anim.gif\"\n    },\n    {\n        name: \"Square\",\n        baseRps: 1, //200s\n        basePrice: [200,0,0],\n        price: [200,0,0],\n        count: 0,\n        vertices: 4,\n        image: \"/assets/generators/square.png\",\n        imageAnim: \"/assets/generators/square-anim.gif\"\n    },\n    {\n        name: \"Pentagon\",\n        baseRps: 3, //256s\n        basePrice: [0,3,0],\n        price: [0,3,0],\n        count: 0,\n        vertices: 5,\n        image: \"/assets/generators/pentagon.png\",\n        imageAnim: \"/assets/generators/pentagon-anim.gif\"\n    },\n    {\n        name: \"Hexagon\",\n        baseRps: 15, //307.2s\n        basePrice: [0,18,0],\n        price: [0,18,0],\n        count: 0,\n        vertices: 6,\n        image: \"/assets/generators/hexagon.png\",\n        imageAnim: \"/assets/generators/hexagon-anim.gif\"\n    },\n    {\n        name: \"Septagon\",\n        baseRps: 50, //409.6s\n        basePrice: [0,80,0],\n        price: [0,80,0],\n        count: 0,\n        vertices: 7,\n        image: \"/assets/generators/septagon.png\",\n        imageAnim: \"/assets/generators/septagon-anim.gif\"\n    },\n    {\n        name: \"Octagon\",\n        baseRps: 125, //524.288s\n        basePrice: [0,0,1],\n        price: [0,0,1],\n        count: 0,\n        vertices: 8,\n        image: \"/assets/generators/octagon.png\",\n        imageAnim: \"/assets/generators/octagon-anim.gif\"\n    },\n\n    //tier 2\n    {\n        name: \"Pyramid\",\n        baseRps: 750, //436.9s\n        basePrice: [0,0,5],\n        price: [0,0,5],\n        count: 0,\n        vertices: 5,\n        image: \"/assets/generators/pyramid.png\",\n        imageAnim: \"/assets/generators/pyramid-anim.gif\"\n    },\n    {\n        name: \"Cube\",\n        baseRps: 3000, //524.288s\n        basePrice: [0,0,24],\n        price: [0,0,24],\n        count: 0,\n        vertices: 8,\n        image: \"/assets/generators/cube.png\",\n        imageAnim: \"/assets/generators/cube-anim.gif\"\n    },\n    {\n        name: \"Dodecahedron\",\n        baseRps: 12000, //546.13s\n        basePrice: [0,0,100],\n        price: [0,0,100],\n        count: 0,\n        vertices: 20,\n        image: \"/assets/generators/dodecahedron.png\",\n        imageAnim: \"/assets/generators/dodecahedron-anim.gif\"\n    },\n]\n\nexport const levelThresholds = [\n    {\n        threshold: 10,\n        bonus: 1.1\n    },\n    {\n        threshold: 25,\n        bonus: 1.2\n    },\n    {\n        threshold: 50,\n        bonus: 1.25\n    },\n    {\n        threshold: 75,\n        bonus: 1.1\n    },\n    {\n        threshold: 100,\n        bonus: 1.5\n    },\n    {\n        threshold: 150,\n        bonus: 1.2\n    },\n    {\n        threshold: 200,\n        bonus: 1.5\n    },\n    {\n        threshold: 250,\n        bonus: 1.2\n    },\n    {\n        threshold: 300,\n        bonus: 1.25\n    },\n    {\n        threshold: 400,\n        bonus: 1.25\n    },\n    {\n        threshold: 500,\n        bonus: 1.25\n    },\n]","export const options = [\n    //types: switch, dropdown, custom?\n    {\n        title: \"Enable animations\",\n        tooltip: \"Enable animations like Generators spinning when hovering over them\",\n        type: \"switch\",\n        value: true,\n    },\n    {\n        title: \"Enable click effect\",\n        tooltip: \"Enables a graphical effect when clicking\",\n        type: \"switch\",\n        value: true,\n    },\n    {\n        title: \"Click effect\",\n        tooltip: \"What effect to be shown when clicking\",\n        type: \"dropdown\",\n        typeValues: [\"ripple\", \"material ripple\", \"splash\"],\n        value: \"material ripple\",\n    },\n    {\n        title: \"Enable click text\",\n        tooltip: \"Enables the the text shown when clicking\",\n        type: \"switch\",\n        value: true,\n    },\n    {\n        title: \"Show stats on-screen\",\n        tooltip: \"Show statistics like total multiplier, vertice count, amount of upgrades purchased etc. on the main screen\",\n        type: \"switch\",\n        value: false,\n    },\n    {\n        title: \"Framerate\",\n        tooltip: \"How many times numbers are calculated each second. Does not affect RPS. High values might have a negative impact on performance\",\n        type: \"dropdown\",\n        typeValues: [144, 120, 75, 60, 30, 15, 10, 5, 1],\n        value: 30,\n    },\n    {\n        title: \"Background color update frequency\",\n        tooltip: \"How many times the background color refreshes each second. Values higher than 5 might have a negative impact on performance\",\n        type: \"dropdown\",\n        typeValues: [10, 5, 2, 1],\n        value: 5,\n    },\n    {\n        title: \"Reset game\",\n        tooltip: \"Resets your progress, not just prestige. Make sure you want to do this before continuing!\",\n        type: \"button\",\n        value: \"reset\",\n    },\n]","//turns a value of red into rgb\nexport const redToRgb = (red) => {\n    let r = parseFloat(red.toFixed(2))\n    let rgb = [r,0,0,0]\n\n    for(let i = 0; i < 3; i++){\n        if(rgb[i] >= 256){\n            let next = Math.floor(rgb[i]/256)\n            rgb[i+1] = next\n            rgb[i] %= 256\n        }\n    }\n    \n    //old\n    // while(r >= 256){\n    //     r -= 256\n    //     g += 1\n    // }\n\n    // while(g >= 256){\n    //     g -= 256\n    //     b += 1\n    // }\n\n    // while(b >= 256){\n    //     b -= 256\n    //     p += 1\n    // }\n\n    return rgb\n}\n\nexport const rgbToRed = (rgb) => {\n\n    //new\n    for(let i = 4; i > 0; i--){\n        if(i === 0) break\n        \n        if(rgb[i] > 0){\n            rgb[i-1] += rgb[i] * 256\n            rgb[i] = 0\n        }\n    }\n\n    //old\n    // while(rgb[3] > 0){\n    //     rgb[3] -= 1\n    //     rgb[2] += 256\n    // }\n\n    // while(rgb[2] > 0){\n    //     rgb[2] -= 1\n    //     rgb[1] += 256\n    // }\n\n    // while(rgb[1] > 0){\n    //     rgb[1] -= 1\n    //     rgb[0] += 256\n    // }\n\n    let red = rgb[0]\n\n    return red\n}\n\nexport const buy = (currentRgb, priceRgb) => {\n    let priceRed = rgbToRed(priceRgb)\n    let currentRed = rgbToRed(currentRgb)\n\n    if(currentRed >= priceRed){\n        currentRed -= priceRed\n    } else {\n        console.log(\"cannot afford!!!\")\n        return null\n    }\n\n    return redToRgb(currentRed)\n}\n\nconst suffixes = [\n    \"K\",\n    \"M\",\n    \"B\",\n    \"T\",\n    \"Qa\",\n    \"Qi\",\n    \"Sx\",\n    \"Sp\",\n    \"O\",\n    \"N\",\n    \"D\",\n]\n\nexport function handleBigNumber(number){\n    if(number >= 1000){\n        let log = Math.floor(Math.log10(number))\n        let suffix = Math.floor(log/3) - 1\n        let text = (number/Math.pow(10,log - (log % 3))).toFixed(3)\n\n        return `${text} ${suffixes[suffix]}`\n    } else {\n        return number\n    }\n    \n\n\n}","import { useEffect, useState } from \"react\"\nimport \"./sideMenuItems.css\"\nimport { generators, levelThresholds } from  \"../js/generators.js\"\nimport { options } from \"../js/options\"\nimport { handleBigNumber } from \"../js/colorCalc\"\n\n\nconst Generator = ({onClick, genId}) => {\n\n    const [gen, setGen] = useState(generators[genId])\n    const [width, setWidth] = useState(0)\n    const [level, setLevel] = useState(0)\n    const [image, setImage] = useState(gen.image)\n\n    useEffect(() => {\n        onBuy()\n    }, [])\n    \n    //Makes sure the progress bar to the next level has the correct width\n    function onBuy(){\n        for(const i in levelThresholds){\n            const t = levelThresholds[i].threshold\n            let prevT = 0\n            \n            if(i > 0){\n                prevT = levelThresholds[i-1].threshold\n            }\n            \n            if(gen.count < t){\n                const widthPercent = (((gen.count - prevT) / (t - prevT)) % t) * 100\n                setWidth(widthPercent)\n                setLevel(i)\n                break\n            }\n        }\n    }\n\n    return(\n        <div id={`generator-${genId}`} className=\"side-menu-item cannot-afford\" onClick={() => {\n            onClick()\n            onBuy()\n        }} \n        //prevent images from animating when hovering over things you can't afford, or when animations are disabled\n        onMouseEnter={() => { \n            if(options[0].value){\n                const el = document.querySelector(`#generator-${genId}`)\n                if(!el.classList.contains(\"cannot-afford\")){\n                    setImage(gen.imageAnim)\n                }            \n            }\n        }\n        } \n        onMouseLeave={() => setImage(gen.image)} >\n                <h5>{gen.name}</h5>\n            <div>\n                <p>+{gen.rps ? handleBigNumber(gen.rps.toFixed(2)) : gen.baseRps}/s</p>\n                <p>({gen.count > 0 ? handleBigNumber((gen.rps * gen.count).toFixed(2)) : \"0\"}/s)</p>\n                <div className=\"generator-price\">\n                    <span>{gen.price[0]}</span>\n                    <span>{gen.price[1]}</span>\n                    <span>{gen.price[2]}</span>\n                </div>\n                <div className=\"generator-count\">\n                    <span>{gen.count}</span>\n                    <div className=\"generator-count-bar\" style={{width: `${width}%`}}></div>\n                    <span className=\"next-level-bonus\">\n                        +{((levelThresholds[level].bonus-1)*100).toFixed(0)}%\n                    </span>\n                </div>\n            </div>\n            <img className=\"generator-image\" src={process.env.PUBLIC_URL + image} alt={gen.name} />\n            <div className=\"prevent-flicker\"></div>\n        </div>\n    )\n}\n\nexport default Generator","export const upgrades = [\n    {\n        name: \"Paint brush\",\n        description: \"Adds +1 red to your clicks\",\n        maxRanks: 10,\n        price: [100,0,0],\n        effect: 1,\n        effectModifier: \"add\" /* add, sub, multiply */,\n        type: \"click\",\n    },\n    {\n        name: \"Paint bucket\",\n        description: \"Adds +0.1 red to your clicks for each vertex acquired\",\n        maxRanks: 5,\n        price: [0,10,0],\n        effect: 0.1,\n        effectModifier: \"add\",\n        type: \"vertex.click\",\n    },\n    {\n        name: \"Vertex extraction\",\n        description: \"Gains +0.1% RPS for each vertex owned\",\n        maxRanks: 10,\n        price: [0,10,0],\n        effect: 0.001,\n        effectModifier: \"add\",\n        type: \"vertex.rps\",\n    },\n    {\n        name: \"Brighter colors\",\n        description: \"You gain +10% rps\",\n        price: [100,1,0],\n        effect: 1.1,\n        effectModifier: \"multiply\",\n        type: \"rps\",\n    },\n    {\n        name: \"Higher saturation\",\n        description: \"You gain +10% rps\",\n        price: [0,3,0],\n        effect: 1.1,\n        effectModifier: \"multiply\",\n        type: \"rps\",\n    },\n    {\n        name: \"Redder reds\",\n        description: \"You gain +15% rps\",\n        price: [0,10,0],\n        effect: 1.15,\n        effectModifier: \"multiply\",\n        type: \"rps\",\n    },\n    {\n        name: \"Bluer blues\",\n        description: \"You gain +15% rps\",\n        price: [0,50,0],\n        effect: 1.15,\n        effectModifier: \"multiply\",\n        type: \"rps\",\n    },\n    {\n        name: \"Greener greens\",\n        description: \"You gain +15% rps\",\n        price: [0,80,0],\n        effect: 1.15,\n        effectModifier: \"multiply\",\n        type: \"rps\",\n    },\n    {\n        name: \"CMYK\",\n        description: \"You gain +25% rps\",\n        price: [0,100,0],\n        effect: 1.25,\n        effectModifier: \"multiply\",\n        type: \"rps\",\n    },\n    {\n        name: \"Better color mixing\",\n        description: \"You gain +25% rps\",\n        price: [0,150,0],\n        effect: 1.25,\n        effectModifier: \"multiply\",\n        type: \"rps\",\n    },\n    {\n        name: \"JPEG artifacts\",\n        description: \"For some reasons gains you +1% rps\",\n        price: [0,100,0],\n        effect: 1.01,\n        effectModifier: \"multiply\",\n        type: \"rps\",\n    },\n    //add color to upgrade types\n    {\n        name: \"SCART connectors\",\n        description: \"Awards you 1 minute of rps\",\n        price: [0,1,0],\n        effect: 1,\n        effectModifier: \"time\",\n        type: \"rps\",\n    },\n    {\n        name: \"RCA connectors\",\n        description: \"Awards you 5 minutes of rps\",\n        price: [0,4,0],\n        effect: 5,\n        effectModifier: \"time\",\n        type: \"rps\",\n    },\n    {\n        name: \"VGA connectors\",\n        description: \"Awards you 15 minutes of rps\",\n        price: [0,75,0],\n        effect: 15,\n        effectModifier: \"time\",\n        type: \"rps\",\n    },\n    {\n        name: \"DVI connectors\",\n        description: \"Awards you 30 minutes of rps\",\n        price: [0,200,0],\n        effect: 30,\n        effectModifier: \"time\",\n        type: \"rps\",\n    },\n    {\n        name: \"HDMI connectors\",\n        description: \"Awards you 45 minutes of rps\",\n        price: [0,0,2],\n        effect: 45,\n        effectModifier: \"time\",\n        type: \"rps\",\n    },\n    {\n        name: \"DisplayPort connectors\",\n        description: \"Awards you 1 hour of rps\",\n        price: [0,0,8],\n        effect: 60,\n        effectModifier: \"time\",\n        type: \"rps\",\n    },\n]","import \"./sideMenuItems.css\"\nimport { upgrades } from \"../js/upgrades\"\nimport { useState } from \"react\"\n\nconst Upgrade = ({onClick, upgradeId}) => {\n\n    const [upgrade, setUpgrade] = useState(upgrades[upgradeId])\n\n    return(\n        <div id={`upgrade-${upgradeId}`} className=\"side-menu-item cannot-afford\" onClick={onClick}>\n            <div>\n                <h5>{upgrade.name}</h5>\n                <p>{upgrade.description}</p>\n                <div className=\"generator-price\">\n                    <span>{upgrade.price[0]}</span>\n                    <span>{upgrade.price[1]}</span>\n                    <span>{upgrade.price[2]}</span>\n                </div>\n            </div>\n            <div className=\"prevent-flicker\"></div>\n        </div>\n    )\n}\n\nexport default Upgrade","import { useRef, useEffect } from \"react\"\n\nexport const useInterval = (callback, delay) => {\n    const savedCallback = useRef();\n  \n    // Remember the latest callback.\n    useEffect(() => {\n      savedCallback.current = callback;\n    }, [callback]);\n  \n    // Set up the interval.\n    useEffect(() => {\n      function tick() {\n        savedCallback.current();\n      }\n      if (delay !== null) {\n        let id = setInterval(tick, delay);\n        return () => clearInterval(id);\n      }\n    }, [delay]);\n  }","export const generatorUpgrades = [\n    //Triangle\n    {\n        name: \"Sharper edges\",\n        description: \"Your Triangles are 100% more effective\",\n        MaxRanks: 10,\n        price: [150,0,0],\n        effect: 2,\n        effectModifier: \"multiply\"\n    },\n    {\n        name: \"I guess it kinda looks like a cursor?\",\n        description: \"Each triangle add +1 red to your clicks\",\n        MaxRanks: 5,\n        price: [0,8,0],\n        effect: 2,\n        effectModifier: \"add\"\n    },\n    //Square\n    { \n        name: \"Straighter corners\",\n        description: \"Your Squares are 100% more effective\",\n        MaxRanks: 10,\n        price: [235,3,0],\n        effect: 2,\n        effectModifier: \"multiply\"\n    },\n    { \n        name: \"Square root\",\n        description: \"Adds √(amount of Squares)% to your rps\",\n        MaxRanks: 1,\n        price: [0,12,0],\n        effect: 1,\n        effectModifier: \"multiply\"\n    },\n    //Pentagon\n    {\n        name: \"Demonic angles\",\n        description: \"Your Pentagons are 100% more effective\",\n        MaxRanks: 10,\n        price: [0,15,0],\n        effect: 2,\n        effectModifier: \"multiply\"\n    },\n    //Hexagon\n    {\n        name: \"Benzene\",\n        description: \"Your Hexagons are 100% more effective\",\n        MaxRanks: 10,\n        price: [0,90,0],\n        effect: 2,\n        effectModifier: \"multiply\"\n    },\n    //Septagons\n    {\n        name: \"Hepta or Septa?\",\n        description: \"Your Septagons are 100% more effective\",\n        MaxRanks: 10,\n        price: [0,145,1],\n        effect: 2,\n        effectModifier: \"multiply\"\n    },\n    //Octagons\n    {\n        name: \"1080º\",\n        description: \"Your Octagons are 100% more effective\",\n        MaxRanks: 10,\n        price: [0,0,5],\n        effect: 2,\n        effectModifier: \"multiply\"\n    }\n]","export const values = {\n    //color values\n    color: [0,0,0,0],\n\n    //rps\n    rpsMultiplier: 1,\n    \n    //click\n    clickValue: 1,\n    clickMultiplier: 1,\n    \n    //vertex\n    vertices: 0,\n    vertexRpsMultiplier: 0,\n    vertexClickMultiplier: 0,\n    clickValuePerVertex: 0,\n\n}","import { values } from \"./values\"\nimport { upgrades } from \"./upgrades\"\nimport { redToRgb } from \"./colorCalc\"\n\nexport const handleUpgrade = (id, rps) => {\n    \n    const upgrade = upgrades[id]\n    const modifier = upgrade.effectModifier\n    \n    //Separate vertex.x to an array of two strings\n    const typeArray = upgrade.type.split(\".\")\n    const type = typeArray[0]\n    \n    switch(modifier){\n        case \"multiply\":\n            multiplyValue(type, upgrade.effect)\n            break\n        case \"add\":\n            addValue(type, upgrade.effect)\n            break\n        case \"time\":\n            addColor(upgrade.effect, rps)\n            break\n        }\n        \n    switch(type){\n        case \"vertex\":\n            vertexUpgrade(typeArray[1], modifier, upgrade.effect)\n            break\n        }\n}\n\nfunction multiplyValue(upgradeType, multiplier){\n    switch(upgradeType){\n        case \"rps\":\n            values.rpsMultiplier *= multiplier\n            break\n\n        case \"click\":\n            values.clickMultiplier *= multiplier\n            break\n    }\n}\n\nfunction addValue(upgradeType, addAmount){\n    switch(upgradeType){\n        case \"rps\":\n            //n/a\n            break\n        case \"click\":\n            values.clickValue += addAmount\n            break\n    }\n}\n\nfunction addColor(time, rps){\n    let red = (time*60)*rps\n    const rgb = redToRgb(red)\n\n    values.color.forEach((c,i) => {\n        values.color[i] += rgb[i]\n    })\n}\n\nfunction vertexUpgrade(type, modifier, effect){\n    switch(type){\n        case \"rps\":\n            if(modifier === \"add\"){\n                values.vertexRpsMultiplier += effect\n            } else if(modifier === \"multiply\"){\n                values.vertexRpsMultiplier *= effect\n            }\n            break\n        case \"click\":\n            if(modifier === \"add\"){\n                values.clickValuePerVertex += effect\n            } else if(modifier === \"multiply\"){\n                values.clickValuePerVertex *= effect\n            }\n            break\n    }\n}","import \"./notification.css\"\n\n\nconst Notification = ({important = false, text}) => {\n\n\n    return (\n        <div className={important ? \"notification important\" : \"notification simple\"}>\n            <p>{text}</p>\n        </div>\n    )\n}\n\nexport default Notification","import React, { useEffect, useRef, useState } from \"react\"\nimport Generator from \"./Generator\"\nimport Upgrade from \"./Upgrade\"\nimport \"./game.css\"\nimport { useInterval } from \"../js/interval.jsx\"\nimport { redToRgb, rgbToRed, buy, handleBigNumber } from \"../js/colorCalc.jsx\"\nimport { generators, levelThresholds } from  \"../js/generators.js\"\nimport { upgrades } from \"../js/upgrades.js\"\nimport { generatorUpgrades } from \"../js/generatorUpgrades\"\nimport { handleUpgrade } from \"../js/upgradeHandler.jsx\"\nimport { values } from \"../js/values.js\"\nimport { useCookies } from \"react-cookie\"\nimport { options } from \"../js/options\"\nimport { click } from \"../js/click\"\nimport Notification from \"./Notification\"\n\nfunction Game(){\n    \n    //cookies\n    const [cookies, setCookie, removeCookie] = useCookies([])\n\n    //menus\n    const [isMenuOpen, setIsMenuOpen] = useState({left: false, right: false})\n    \n    //fps\n    const [framerate, setFramerate] = useState(30)\n    \n    //game\n    const [isActive, setIsActive] = useState(true)\n    const [generatorElements, setGeneratorElements] = useState([])\n    const [upgradeElements, setUpgradeElements] = useState([])\n    const [elements, setElements] = useState({\n        main: null, header: null\n    })\n\n    const [color, setColor] = useState({r: 0, g: 0, b: 0, p: 0})\n    \n    //click\n    const [clickValueRed, setClickValueRed] = useState(values.clickValue*1)\n    const [clickValueRgb, setClickValueRgb] = useState([0,0,0,0])\n    \n    //rps\n    const [rps, setRps] = useState(0)\n    const [rpt, setRpt] = useState(0)\n    const [rgbps, setRgbps] = useState([0,0,0,0])\n    const [rgbpt, setRgbpt] = useState([0,0,0,0])\n\n    //stats\n    const [stats, setStats] = useState({\n        generatorCount: 0, upgradeCount: 0, totalMultiplier: 1\n    })\n\n    //notifications\n    const [notifs, setNotifs] = useState([])\n    \n    //load game\n    useEffect(() => {\n        setElements({main: document.querySelector('.square'), \n        header: document.querySelector(\".App-header\")})\n        \n        //things i need to know because im too lazy to check manually\n        console.log(generatorUpgrades.length + upgrades.length + \" total upgrades\")\n        \n        //Checks if there is any saved data before trying to load it\n        if(cookies.values){\n            //loads all values from values.js\n            for(const property in cookies.values){\n                values[property] = cookies.values[property]\n            }\n        } else {\n            console.log(\"welcome!\")\n        }\n        \n        //Checks if there are any bought generators before trying to load them\n        if(cookies.generators){\n            //loads all generators from generators.js\n            generators.forEach((gen, i) => {\n                for(const property in cookies.generators[i]){\n                    gen[property] = cookies.generators[i][property]\n                }\n            })\n        }\n        \n        //Checks if there are any upgrades bought before trying to load them\n        if(cookies.upgrades){\n            upgrades.forEach((upgrade, i) => {\n                if(cookies.upgrades[i] != null){\n                    upgrade.bought = cookies.upgrades[i].bought\n                } else {\n                    upgrade.bought = false\n                }\n            })\n        }\n\n        //Checks if there are option values stored in cookies\n        if(cookies.options){\n            options.forEach((opt,i) => {\n                if(cookies.options[i] != null){\n                    opt.value = cookies.options[i].value\n                }\n            })\n        }\n        \n        onUpgrade()\n    }, [])\n        \n        //Checks if the window is active or not\n        document.addEventListener('visibilitychange', () => {\n            if(document.hidden){\n                setIsActive(false)\n            } else {\n            setIsActive(true)\n        }\n    })\n    \n    //intervals\n    \n    //save the game once every half minute\n    useInterval(() => {\n        //Loops through generators and saves how many are bought\n        //and how much they currently cost\n        let generatorData = []\n        generators.forEach((gen, i) => {\n            generatorData.push({})\n            for(const property in generators[i]){\n                if(property === \"count\" || property === \"price\" || property === \"multiplier\"){\n                    generatorData[i][property] = generators[i][property]\n                }\n            }\n        })\n        \n        //Loops through upgrades and saves how many are bought\n        let upgradeData = []\n        upgrades.forEach((upgrade, i) => {\n            upgradeData.push({})\n            upgradeData[i].bought = upgrade.bought\n        })\n\n        let optionsData = []\n        options.forEach((opt,i) => {\n            optionsData.push({})\n            optionsData[i].value = opt.value\n        })\n        \n        setCookie('values', values)\n        setCookie('generators', generatorData)\n        setCookie('upgrades', upgradeData)\n        setCookie('options', optionsData)\n\n        console.log(\"saved\")\n        addNotification(\"Saved\")\n    }, 60000)\n    \n    //increments rgb each tick\n    useInterval(() => {\n        if(rps > 0){\n            incrementRgb(rgbpt)\n        }\n        if(framerate != options[5].value){\n            setFramerate(options[5].value)\n        }\n    }, 1000 / framerate)\n    \n    //handle background color change\n    useInterval(() => {\n        let bg = elements.main\n\n        if(rgbps[2] >= 1){\n            bg.style.backgroundColor = `rgb(255, 255, ${color.b})`\n        } else if(rgbps[1] >= 1){\n            bg.style.backgroundColor = `rgb(255, ${color.g}, ${color.b})`\n        } else {\n            bg.style.backgroundColor = `rgb(${color.r}, ${color.g}, ${color.b})`\n        }\n    }, 1000 / options[6].value)\n    \n    //checks if you can afford each generator and applies a filter for those you cannot\n    useInterval(() => {\n        checkCanAfford()\n    }, 1000/2) //lower if necessary\n    \n    //convertions\n    \n    useEffect(() => {\n        setClickValueRgb(redToRgb(clickValueRed))\n    }, [clickValueRed])\n    \n    //sets rpt and rgbps every time rps changes\n    useEffect(() => {        \n        if(!document.hidden){\n            setRpt(rps/(1000/(1000/framerate)))\n        } else {\n            setRpt(rps)\n        }\n        setRgbps(redToRgb(rps))\n    }, [rps, framerate, isActive])\n    \n    //set rgbpt every time rpt changes\n    useEffect(() => {\n        setRgbpt(redToRgb(rpt))\n    }, [rpt])\n    \n    //updates the background color to color values after loading the game, probably not necessary\n    useEffect(() => {\n        if(elements.main != null){\n            elements.main.style.backgroundColor = `rgb(${color.r}, ${color.g}, ${color.b})`\n        }\n    }, [elements.main])\n    \n    function checkCanAfford(){\n        const c = values.color\n        \n        generators.forEach((gen, i) => {\n            if(rgbToRed(Object.assign({}, gen.price)) > rgbToRed([c[0], c[1], c[2], c[3]])){\n                document.querySelector(`#generator-${i}`).classList.add(\"cannot-afford\")\n            }else {\n                document.querySelector(`#generator-${i}`).classList.remove(\"cannot-afford\")\n            }\n        })\n\n        upgrades.forEach((upgrade, i) => {\n            if(upgrade.bought){\n                return\n            }\n\n            const upgradeElement = document.querySelector(`#upgrade-${i}`)\n\n            if(upgradeElement){   \n                if(rgbToRed(Object.assign({}, upgrade.price)) > rgbToRed([c[0], c[1], c[2], c[3]])){\n                    upgradeElement.classList.add(\"cannot-afford\")\n                }else {\n                    upgradeElement.classList.remove(\"cannot-afford\")\n                }\n            }\n        })\n    }\n    \n    function incrementRgb(rgb){\n        const c = values.color\n        values.color = [c[0] + rgb[0], c[1] + rgb[1], c[2] + rgb[2], c[3] + rgb[3]]\n        checkRgb()\n    }\n    \n    function checkRgb(){\n        let c = redToRgb(rgbToRed(values.color))\n        values.color = c\n        \n        setColor({r: c[0], g: c[1], b: c[2], p: c[3]})\n    }\n    \n    function calculateStats(){\n        let rps = 0\n        let vertices = 0\n        let genCount = 0\n        generators.forEach((gen, i) => {\n            let genRps = gen.count * gen.baseRps\n\n            //Checks if the current generator has a multiplier\n            if(gen.multiplier){\n                genRps *= gen.multiplier\n            }\n\n            rps += genRps\n            vertices += (gen.count * gen.vertices)\n            genCount += gen.count\n        })\n        values.vertices = vertices\n\n        let upgradeCount = 0\n        upgrades.forEach((upgrade, i) => {\n            if(upgrade.bought){\n                upgradeCount++\n            }\n        })\n        \n        let mult = values.rpsMultiplier\n        let clickMult = values.clickMultiplier\n\n        if(vertices > 0){\n            mult *= 1 + (vertices * values.vertexRpsMultiplier)\n            clickMult *= 1 + (vertices * values.vertexClickMultiplier)\n        }\n\n        let totalClickValue = (values.clickValue + (vertices * values.clickValuePerVertex)) * clickMult\n        let totalRps = rps * mult\n\n        setClickValueRed(totalClickValue)\n        setRps(totalRps)\n        setStats({generatorCount: genCount, upgradeCount: upgradeCount, totalMultiplier: mult})\n        values.rps = totalRps\n\n        //Calculate each individual generator's rps\n        generators.forEach((gen, i) => {\n            gen.rps = gen.baseRps * mult\n            if(gen.multiplier){\n                gen.rps *= gen.multiplier\n            }\n        })\n    }\n    \n    function checkMultiplier(){\n        let generatorElements = generators.map((gen, i) => {\n            return <Generator key={i} genId={i} onClick={() => tryBuy(i)} /> \n        })\n\n        setGeneratorElements(generatorElements)\n    }\n\n    function onUpgrade(){\n        //Sorts upgrades by price and adds them to the list\n        const sortedUpgrades = upgrades.sort((a,b) => {\n            let aPrice = rgbToRed(Object.assign({}, a.price))\n            let bPrice = rgbToRed(Object.assign({}, b.price))\n            return aPrice - bPrice\n        })\n        let upgradeElements = sortedUpgrades.map((upgrade, i) => { \n            if(!upgrade.bought){\n                return <Upgrade key={i} upgradeId={i} onClick={() => tryBuyUpgrade(i)}/>\n            } else {\n                return\n            }\n        })\n        setUpgradeElements(upgradeElements)\n        \n        checkRgb()\n        calculateStats()\n        checkMultiplier()\n    }\n    \n    function onClick(e) {\n        click(e, elements, clickValueRed)\n        incrementRgb(clickValueRgb)\n    }\n\n    function addNotification(text, important = false){\n        const notif = <Notification text={text} important={important} />\n    \n        setNotifs([notif])\n        setTimeout(() => {\n            setNotifs([])\n        }, important ? 4000 : 2500);\n    }\n\n    //buying generators\n    function tryBuy(id){\n        const gen = generators[id]\n        const price = Object.assign({}, gen.price)\n        const c = values.color\n\n        const remainder = buy([c[0], c[1], c[2], c[3]], price)\n\n        if(remainder != null){\n            values.color = [remainder[0], remainder[1], remainder[2], remainder[3]]\n            gen.count += 1\n            \n            let multiplier = 1\n            \n            for(const i in levelThresholds){\n                const t = levelThresholds[i].threshold\n                const bonus = levelThresholds[i].bonus\n\n                if(gen.count >= t){\n                    multiplier *= bonus\n                } else {\n                    break\n                } \n            }\n\n            gen.multiplier = multiplier\n\n            //increase price of the generator when buying\n            const priceIncreasePercentage = (112 + id)/100\n            gen.price = redToRgb(Math.floor(rgbToRed(price)*priceIncreasePercentage))\n            \n            calculateStats()\n            checkCanAfford()\n            checkMultiplier()\n        }\n    }\n    \n    function tryBuyUpgrade(id){\n        const upgrade = upgrades[id]\n        const price = Object.assign({}, upgrade.price)\n        const c = values.color\n        const remainder = buy([c[0], c[1], c[2], c[3]], price)\n\n        if(remainder != null){\n            values.color = [remainder[0], remainder[1], remainder[2], remainder[3]]\n            handleUpgrade(id, values.rps)\n            \n            upgrade.bought = true\n            onUpgrade()\n            checkCanAfford()\n        }\n    }\n    \n    function openMenu(dir){\n        const menu = document.querySelector(`.${dir}-menu`)\n        const button = document.querySelector(`.open-${dir}`)\n\n        menu.classList.toggle(`hidden-${dir}`)\n\n        isMenuOpen[dir] ? button.firstChild.innerText = \">\" : button.firstChild.innerText = \"<\"\n\n        setIsMenuOpen({...isMenuOpen, [dir]: !isMenuOpen[dir]})\n    }\n\n     const leftMenu = <div className=\"left-menu side-menu\">\n         <div className=\"left-menu-content menu-content\">\n             <h4>Upgrades</h4>\n             {upgradeElements}\n         </div>\n         <button className=\"open-left menu-button\" onClick={() => openMenu(\"left\")}><span>{\">\"}</span></button>\n     </div>\n     \n     const rightMenu = <div className=\"right-menu side-menu\">\n        <button className=\"open-right menu-button\" onClick={() => openMenu(\"right\")}><span>{\">\"}</span></button>\n         <div className=\"right-menu-content menu-content\">\n            <h4>Generators</h4>\n            {generatorElements}\n             </div>\n        </div>\n\n        const leftStats = <div className=\"stats bottom-right\">\n            <p>R/t: {rpt.toFixed(2)}</p>\n            <p>RGB/s: {rgbps[0].toFixed(2)}, {rgbps[1]}, {rgbps[2]}, {rgbps[3]}</p>\n            <p>RGB/t: {rgbpt[0].toFixed(2)}, {rgbpt[1]}, {rgbpt[2]}, {rgbpt[3]}</p>\n            <p>R/click: {clickValueRed}</p>\n        </div>\n\n        const rightStats = <div className=\"stats bottom-left\">\n            <p>Total multiplier: {stats.totalMultiplier.toFixed(3)}x</p>\n            <p>Total Generators: {stats.generatorCount}</p>\n            <p>Vertices: {values.vertices}</p>\n            <p>Upgrades purchased: {stats.upgradeCount}</p>\n        </div>\n\n    return (\n        <section>\n        <div className=\"square\" onClick={onClick}></div>\n            <div className={\"color-values \"}>\n                <span className=\"cur-r\">\n                    {Math.floor(color.r)}\n                </span>\n                <span className=\"cur-g\">\n                    {color.g}\n                </span>\n                <span className=\"cur-b\">\n                    {color.b}\n                </span>\n                <span className=\"cur-p\">\n                    {handleBigNumber(color.p)} px\n                </span>\n                <p>rps: {handleBigNumber(rps.toFixed(1))}</p>\n            </div>\n            {leftMenu}\n            {rightMenu}\n            {options[4].value ? leftStats : null}\n            {options[4].value ? rightStats : null}\n            {notifs}\n        </section>\n    )\n}\n\nexport default Game","import { options } from \"./options\"\nimport { handleBigNumber } from \"./colorCalc\"\n\nexport const click = (e, elements, clickValueRed) => {\n    let headerHeight, x, y, randomWidthOffset = 0, randomHeightOffset = 0\n    //checks options if any click effects are enabled\n    if(options[1].value || options[3].value){\n        headerHeight = elements.header.offsetHeight\n        \n        //getting pointer location and accounts for header\n        x = e.clientX\n        y = e.clientY\n        \n        //makes sure the text doesn't appear underneath the header\n        randomWidthOffset = Math.floor(Math.random() * 60) - 30\n        randomHeightOffset = Math.floor(Math.random() * 40)\n    }\n    \n    //checks if click effect text option is enabled\n    if(options[3].value){\n        const text = document.createElement(\"span\")\n        text.innerText = handleBigNumber(clickValueRed.toFixed(0))\n        \n        text.classList.add(\"click-text\")  \n        elements.main.appendChild(text)\n\n        let textX = x - text.offsetWidth + randomWidthOffset + (text.offsetWidth / 2)\n        let textY = y - headerHeight - text.offsetHeight - randomHeightOffset\n        \n        if(textY <= 0){\n            textY = 8\n        }\n        \n        text.style.left = `${textX}px`\n        text.style.top = `${textY}px`\n        \n        setTimeout(() => { text.remove() }, 800);\n    }\n    \n    //checks if click effect graphic option is enabled\n    if(options[1].value){\n        const clickEffect = document.createElement(\"div\")\n        clickEffect.style.position = \"absolute\"\n        elements.main.appendChild(clickEffect)\n        \n        \n        switch(options[2].value){\n            case \"ripple\":\n                clickEffect.classList.add(\"ripple\")  \n                break\n            case \"material ripple\":\n                clickEffect.classList.add(\"ripple-simple\")\n                break\n                case \"splash\":\n                clickEffect.classList.add(\"splash\")\n\n                for(let i = 0; i < 5; i++){\n                    const fx = document.createElement(\"div\")\n                    let deg = Math.random() * 360 \n\n                    fx.classList.add(\"splash-line\")\n\n                    fx.style.transform = `rotate(${deg}deg)`\n\n                    clickEffect.appendChild(fx)\n                }\n                break\n        }\n        \n        clickEffect.style.left = `${x - clickEffect.offsetWidth / 2}px`\n        clickEffect.style.top = `${y - headerHeight - clickEffect.offsetHeight / 2}px`\n\n        setTimeout(() => { clickEffect.remove() }, 500);\n    }\n}","import React from 'react'\nimport \"./tooltip.css\"\nconst Tooltip = ({ text }) => {\n    return (\n        <div className={\"tooltip\"}>\n            {text}\n        </div>\n    )\n}\n\nexport default Tooltip","import { useEffect } from \"react\"\nimport { useState } from \"react\"\nimport { options } from \"../js/options.js\"\nimport \"./options.css\"\nimport Tooltip from \"./Tooltip.jsx\"\n\nconst Option = ({ optionId, callback }) => {\n    const [opt, setOpt] = useState(options[optionId])\n    const [action, setAction] = useState()\n    const [isEnabled, setIsEnabled] = useState(false)\n    const [dropdownValue, setDropdownValue] = useState(\"\")\n    const [tooltip, setTooltip] = useState()\n\n    useEffect(() => {\n        let el = <div></div>\n\n        switch (opt.type) {\n            case \"switch\":\n                el = <div className={`switch-icon ${opt.value ? \"enabled\" : \"disabled\"}`}><div /></div>\n                setIsEnabled(opt.value)\n                break\n            case \"dropdown\":\n                const values = opt.typeValues.map((v, i) => {\n                    return <option key={i} id={`option-${i}`} value={v}>{v}</option>\n                })\n\n                el = <select id={`option-${optionId}`} value={opt.value} name={opt.title}\n                    onChange={(e) => {\n                        opt.value = e.target.value\n                        setDropdownValue(opt.value)\n                    }}>\n                    {values}\n                </select>\n                break\n                case \"button\":\n                    el = <div className={`button`} onClick={onClick}><div>{opt.value}</div></div>\n                    break\n        }\n        \n        setAction(el)\n    }, [isEnabled, dropdownValue])\n    \n    function onClick() {\n        if (opt.type === \"switch\") {\n            opt.value = !opt.value\n            setIsEnabled(opt.value)\n        } else if (opt.type == \"button\") {\n            //opt.value is what the button will do\n            switch (opt.value) {\n                case \"reset\":\n                    //add confirmation dialog\n                    callback()\n                    break\n            }\n        }\n    }    \n\n    return (\n        <div className=\"option\" onClick={opt.type == \"button\" ? null : onClick} \n        onMouseEnter={() => {\n            setTooltip(<Tooltip text={opt.tooltip}/>)\n        }}\n        onMouseLeave={() => {\n            setTooltip(null)\n        }}>\n            <span>{opt.title}</span>\n            {action}\n            {tooltip}\n        </div>\n    )\n}\n\nexport default Option","import { useState, useEffect } from \"react\"\nimport { options } from \"../js/options\"\nimport { useCookies } from \"react-cookie\"\nimport Option from \"./Option\"\nimport \"./options.css\"\n\nconst Options = ({ dismiss }) => {\n    const [cookies, setCookie, removeCookie] = useCookies([])\n    \n    const [optionsElements, setOptionsElements] = useState([])\n\n    useEffect(() => {\n        \n        let optionCallback = {}\n        const elements = options.map((o, i) => {\n            if (o.type == \"button\") {\n                switch (o.value) {\n                    case \"reset\":\n                        console.log(i + \" is reset\")\n                        optionCallback = reset\n                        break\n                }\n            }\n\n            return <Option key={i} optionId={i} callback={() => optionCallback()} />\n        })\n\n        setOptionsElements(elements)\n    }, [])\n\n    function click(e) {\n        if (e.currentTarget === e.target) {\n            dismiss()\n        }\n    }\n\n    //Clear cookies and reload page\n    const reset = () => {\n        console.log(\"reset\")\n        for (const c in cookies) {\n            removeCookie(c.toString())\n        }\n        window.location.reload()\n        console.log(\"removed cookies\")\n    }\n\n    return (\n        <div className=\"options-background\" onClick={(e) => click(e)}>\n            <div className=\"options-content\">\n                <h3>Options</h3>\n                <div>\n                    {optionsElements}\n                </div>\n            </div>\n        </div>\n    )\n}\n\nexport default Options","import './App.css';\nimport Game from './components/Game'\nimport { useCookies } from \"react-cookie\"\nimport { useState } from 'react';\nimport Options from './components/Options';\n\nfunction App() {\n\n  const [isOptionsOpen, setIsOptionsOpen] = useState(false)\n\n  function toggleOptions(){\n    if(isOptionsOpen){\n      document.querySelector(\".options-background\").classList.add(\"on-remove\")\n      setTimeout(() => {\n        setIsOptionsOpen(!isOptionsOpen)\n      }, 250);\n    } else {\n      setIsOptionsOpen(!isOptionsOpen)\n    }\n  }\n\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <h3 className=\"title\">rgb</h3>\n        <button className=\"header-button\" onClick={toggleOptions}><h3>options</h3></button>\n      </header>\n      <main>\n        {isOptionsOpen ? <Options  dismiss={toggleOptions}/> : null}\n        <Game />\n      </main>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport { CookiesProvider } from 'react-cookie'\n\nReactDOM.render(\n  <React.StrictMode>\n    <CookiesProvider>\n      <App />\n    </CookiesProvider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}